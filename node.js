require('dotenv').config();
const { Telegraf } = require('telegraf');
const sqlite = require('sqlite');
const sqlite3 = require('sqlite3');
const fs = require('fs');
const path = require('path');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
const logStream = fs.createWriteStream(path.join(__dirname, 'bot.log'), { flags: 'a' });
const log = (message, level = 'INFO') => {
  const timestamp = new Date().toISOString();
  const logMessage = `[${timestamp}] [${level}] ${message}\n`;
  logStream.write(logMessage);
  console[level === 'ERROR' ? 'error' : level === 'WARN' ? 'warn' : 'log'](logMessage);
};

const bot = new Telegraf(process.env.BOT_TOKEN);

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const config = {
  ADMIN_CHAT_ID: process.env.ADMIN_CHAT_ID,
  SOURCE_CHAT_ID: process.env.SOURCE_CHAT_ID,
  REPORT_CHAT_ID: process.env.REPORT_CHAT_ID,
  CHECK_INTERVAL: parseInt(process.env.CHECK_INTERVAL) || 10 * 60 * 1000,
  TIMEOUT_MINUTES: parseInt(process.env.TIMEOUT_MINUTES) || 45,
  get TIMEOUT() { return this.TIMEOUT_MINUTES * 60 * 1000 }
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
if (!config.ADMIN_CHAT_ID || !config.SOURCE_CHAT_ID || !config.REPORT_CHAT_ID) {
  log('–ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!', 'ERROR');
  process.exit(1);
}

let db;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
async function initDb() {
  try {
    db = await sqlite.open({
      filename: './bot.db',
      driver: sqlite3.Database
    });

    await db.run('PRAGMA journal_mode = WAL');

    await db.run(`
      CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        last_seen INTEGER,
        warnings INTEGER DEFAULT 0
      );
    `);

    await db.run(`
      CREATE TABLE IF NOT EXISTS ignore_list (
        user_id INTEGER PRIMARY KEY
      );
    `);

    log('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
  } catch (error) {
    log(`–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: ${error.message}`, 'ERROR');
    throw error;
  }
}

// –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ë–î
async function dbQuery(query, params = []) {
  try {
    return await db[query.startsWith('SELECT') ? 'all' : 'run'](query, params);
  } catch (error) {
    log(`–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: ${query}. –û—à–∏–±–∫–∞: ${error.message}`, 'ERROR');
    throw error;
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
function isAdmin(ctx) {
  return String(ctx.chat.id) === config.ADMIN_CHAT_ID;
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function isValidUserId(userId) {
  return /^\d+$/.test(userId);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
async function handleWarning(userId, username) {
  try {
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
    await dbQuery(`
      UPDATE users 
      SET warnings = warnings + 1 
      WHERE user_id = ?
    `, [userId]);

    const user = await dbQuery(
      'SELECT warnings FROM users WHERE user_id = ?',
      [userId]
    );

    const warnings = user[0]?.warnings || 1;
    let message = `‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username ? `@${username}` : ''} (ID ${userId}) `;
    message += `–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª —Ñ–æ—Ç–æ –±–æ–ª–µ–µ ${config.TIMEOUT_MINUTES} –º–∏–Ω—É—Ç.`;

    if (warnings > 1) {
      message += `\nüö® –≠—Ç–æ ${warnings}-–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ!`;
    }

    await bot.telegram.sendMessage(config.REPORT_CHAT_ID, message);
    log(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}. –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${warnings}`);
  } catch (error) {
    log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: ${error.message}`, 'ERROR');
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
bot.on('photo', async (ctx) => {
  try {
    if (String(ctx.chat.id) !== config.SOURCE_CHAT_ID) return;

    const uid = ctx.from.id;
    const username = ctx.from.username || '';
    const now = Date.now();

    await dbQuery(`
      INSERT INTO users (user_id, username, last_seen, warnings)
      VALUES (?, ?, ?, 0)
      ON CONFLICT(user_id) DO UPDATE SET
        username = excluded.username,
        last_seen = excluded.last_seen,
        warnings = 0;
    `, [uid, username, now]);

    await ctx.reply('–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ, —Å–ø–∞—Å–∏–±–æ!');
    log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username ? `@${username}` : uid} –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ`);
  } catch (error) {
    log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: ${error.message}`, 'ERROR');
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
bot.command('ignore', async (ctx) => {
  try {
    if (!isAdmin(ctx)) {
      log(`–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–µ ignore –∏–∑ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞: ${ctx.chat.id}`, 'WARN');
      return ctx.reply('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
    }

    const args = ctx.message.text.split(' ')[1];
    if (!args || !isValidUserId(args)) {
      return ctx.reply('–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)');
    }

    const uid = parseInt(args);
    await dbQuery('INSERT OR IGNORE INTO ignore_list(user_id) VALUES (?)', [uid]);
    await ctx.reply(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${uid} –¥–æ–±–∞–≤–ª–µ–Ω –≤ ignore-–ª–∏—Å—Ç.`);
    log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${uid} –¥–æ–±–∞–≤–ª–µ–Ω –≤ ignore-–ª–∏—Å—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º ${ctx.from.id}`);
  } catch (error) {
    log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã ignore: ${error.message}`, 'ERROR');
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.');
  }
});

bot.command('unignore', async (ctx) => {
  try {
    if (!isAdmin(ctx)) {
      log(`–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–µ unignore –∏–∑ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞: ${ctx.chat.id}`, 'WARN');
      return ctx.reply('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
    }

    const args = ctx.message.text.split(' ')[1];
    if (!args || !isValidUserId(args)) {
      return ctx.reply('–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)');
    }

    const uid = parseInt(args);
    await dbQuery('DELETE FROM ignore_list WHERE user_id = ?', [uid]);
    await ctx.reply(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${uid} —É–¥–∞–ª—ë–Ω –∏–∑ ignore-–ª–∏—Å—Ç–∞.`);
    log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${uid} —É–¥–∞–ª–µ–Ω –∏–∑ ignore-–ª–∏—Å—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º ${ctx.from.id}`);
  } catch (error) {
    log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã unignore: ${error.message}`, 'ERROR');
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç—É—Å–∞
bot.command('status', async (ctx) => {
  try {
    if (!isAdmin(ctx)) {
      log(`–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–µ status –∏–∑ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞: ${ctx.chat.id}`, 'WARN');
      return ctx.reply('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
    }

    const rows = await dbQuery('SELECT user_id, username, last_seen, warnings FROM users');
    if (!rows.length) return ctx.reply('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö.');

    const now = Date.now();
    let msg = 'üìù –°—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:\n\n';

    for (const { user_id, username, last_seen, warnings } of rows) {
      const diff = Math.floor((now - last_seen) / 60000);
      msg += `‚Ä¢ ID ${user_id}${username ? ` (@${username})` : ''}: ${diff} –º–∏–Ω –Ω–∞–∑–∞–¥, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${warnings}\n`;
    }

    await ctx.reply(msg);
    log(`–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ${ctx.from.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç—É—Å`);
  } catch (error) {
    log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã status: ${error.message}`, 'ERROR');
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞.');
  }
});

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
async function checkActivity() {
  try {
    log('–ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏');
    const now = Date.now();
    const users = await dbQuery('SELECT user_id, username, last_seen FROM users');
    const ignore = await dbQuery('SELECT user_id FROM ignore_list');
    const ignoreSet = new Set(ignore.map(r => r.user_id));

    for (const u of users) {
      if (ignoreSet.has(u.user_id)) continue;
      if (now - u.last_seen > config.TIMEOUT) {
        await handleWarning(u.user_id, u.username);
        // –û–±–Ω–æ–≤–ª—è–µ–º last_seen —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
        await dbQuery('UPDATE users SET last_seen = ? WHERE user_id = ?', [now, u.user_id]);
      }
    }

    log('–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  } catch (error) {
    log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: ${error.message}`, 'ERROR');
  } finally {
    setTimeout(checkActivity, config.CHECK_INTERVAL);
  }
}

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async function startBot() {
  try {
    await initDb();
    bot.launch().then(() => {
      log('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω');
      checkActivity(); // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
    });

    // –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
    process.once('SIGINT', () => {
      log('–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ –ø–æ SIGINT');
      bot.stop('SIGINT');
      process.exit();
    });

    process.once('SIGTERM', () => {
      log('–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ –ø–æ SIGTERM');
      bot.stop('SIGTERM');
      process.exit();
    });
  } catch (error) {
    log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: ${error.message}`, 'ERROR');
    process.exit(1);
  }
}

startBot();
